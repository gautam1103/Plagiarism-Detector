import streamlit as st
import nltk
from nltk.util import ngrams
from nltk.lm.preprocessing import padded_everygram_pipeline
from nltk.lm import MLE
from nltk.corpus import brown, stopwords
from nltk.probability import FreqDist
import matplotlib.pyplot as plt
import string

# Download NLTK resources if not already downloaded
nltk.download('punkt')
nltk.download('brown')
nltk.download('stopwords')

# Function to preprocess text
def preprocess_text(text):
    tokens = nltk.word_tokenize(text.lower())
    stop_words = set(stopwords.words('english'))
    tokens = [token for token in tokens if token not in stop_words and token not in string.punctuation]
    return tokens

# Function to plot most common words
def plot_most_common_words(text):
    tokens = preprocess_text(text)
    word_freq = FreqDist(tokens)
    most_common_words = word_freq.most_common(10)

    words, counts = zip(*most_common_words)

    plt.figure(figsize=(10, 6))
    plt.bar(words, counts)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title('Most Common Words')
    plt.xticks(rotation=45)
    st.pyplot(plt)
    plt.clf()  # Clear the plot after displaying

# Function to plot repeated words
def plot_repeated_words(text):
    tokens = preprocess_text(text)
    word_freq = FreqDist(tokens)
    repeated_words = [word for word, count in word_freq.items() if count > 1][:10]
    if not repeated_words:
        st.warning("No repeated words found.")
        return

    words, counts = zip(*[(word, word_freq[word]) for word in repeated_words])

    plt.figure(figsize=(10, 6))
    plt.bar(words, counts)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title('Repeated Words')
    plt.xticks(rotation=45)
    st.pyplot(plt)
    plt.clf()  # Clear the plot after displaying

# Function to calculate perplexity
def calculate_perplexity(text, model):
    tokens = preprocess_text(text)
    padded_tokens = ['<s>'] + tokens + ['</s>']
    ngrams_sequence = list(ngrams(padded_tokens, model.order))
    perplexity = model.perplexity(ngrams_sequence)
    return perplexity

# Function to calculate burstiness score
def calculate_burstiness(text):
    tokens = preprocess_text(text)
    word_freq = FreqDist(tokens)

    avg_freq = sum(word_freq.values()) / len(word_freq)
    variance = sum((freq - avg_freq) ** 2 for freq in word_freq.values()) / len(word_freq)

    burstiness_score = variance / (avg_freq ** 2)
    return burstiness_score

# Function to determine if text is likely generated by a language model
def is_generated_text(perplexity, burstiness_score):
    if perplexity < 100 and burstiness_score < 1:
        return "Likely generated by a language model"
    else:
        return "Not likely generated by a language model"

# Main function for Streamlit app
def main():
    st.title("Text Analysis Using Language Models")
    text = st.text_area("Paste the text you wish to analyze here", height=200)
    
    if st.button("Analyze Text"):
        if text:
            # Load or train your language model
            tokens = brown.words()  # Use the Brown corpus for training (you can use any corpus of your choice)
            train_data, padded_vocab = padded_everygram_pipeline(1, tokens)
            model = MLE(1)
            model.fit(train_data, padded_vocab)

            # Calculate perplexity
            perplexity = calculate_perplexity(text, model)
            st.write("Perplexity Score:", perplexity)

            # Calculate burstiness score
            burstiness_score = calculate_burstiness(text)
            st.write("Burstiness Score:", burstiness_score)

            # Determine if text is likely generated by a language model
            generated_cue = is_generated_text(perplexity, burstiness_score)
            st.write("Conclusion:", generated_cue)

            # Display plot of most common words
            plot_most_common_words(text)

            # Display plot of repeated words
            plot_repeated_words(text)
            
        else:
            st.warning("Please input text for analysis.")

if __name__ == "__main__":
    main()
